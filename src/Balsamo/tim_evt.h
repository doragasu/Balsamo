/************************************************************************//**
 * \file  tim_evt.h
 * \brief Runs disk_timerproc() each millisecond. Also allows to generate
 * timer based system events.
 *
 * \author Jesus Alonso Fernandez (doragasu)
 * \note This module uses TIMER4.
 * \warning Temporizations may not be very accurate!
 * \license GPL-3.0+ <http://www.gnu.org/licenses/gpl.html>
 *****************************************************************************/
/* This file is part of BALSAMO source package.
 *
 * BALSAMO is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * Some open source application is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BALSAMO.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _TIM_EVT_H_
#define _TIM_EVT_H_

#include "common.h"
#include "system.h"

/** \defgroup tim_evt_api tim_evt
 *
 * Runs disk_timerproc() each millisecond. Also allows to generate
 * timer based system events.
 * \{ */

/// Number of timers supported by the module
#define TIM_EVT_N_TIMERS	2

/************************************************************************//**
 * \brief TimEvtInit: Initializes the module.
 ****************************************************************************/
void TimEvtInit(void);

/************************************************************************//**
 * \brief TimEvtConfig: Sets the system event generated by the module.
 *
 * \param[in] nTimer Timer number to set event.
 * \param[in] event Event to generate when the Timer reaches count.
 ****************************************************************************/
void TimEvtConfig(unsigned char nTimer, SysEvent event);

/************************************************************************//**
 * \brief TimEvtRun: Starts a N ms count.
 *
 * \param[in] nTimer Timer number to set count.
 * \param[in] delayMs Number of milliseconds to count before generating an
 *            event.
 ****************************************************************************/
void TimEvtRun(unsigned char nTimer, unsigned int delayMs);

/************************************************************************//**
 * \brief TimEvtStop: Stops an already running timer count.
 *
 * \param[in] nTimer Timer number to stop.
 ****************************************************************************/
void TimEvtStop(unsigned char nTimer);

/** \} */

#endif /*_TIM_EVT_H_*/
